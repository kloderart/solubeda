{"version":3,"sources":["webpack:///./src/components/artwork/format/Cam.jsx","webpack:///./src/templates/artwork-detail.js"],"names":["StyledCam","styled","video","ImageHolder","div","status","enter","exit","Cam","data","images","returnPage","camRef","useRef","useEffect","cam","current","camStream","navigator","mediaDevices","getUserMedia","width","offsetHeight","height","offsetWidth","then","stream","srcObject","onloadedmetadata","e","play","catch","err","console","error","pause","getTracks","stop","image","Close","url","autoplay","ref","src","path","alt","title","frontmatter","formatMap","serie","Carousel","Video","cube","Cube","query","detail","markdownRemark","Cmp","format"],"mappings":"2uBAKA,IAAMA,EAAYC,IAAOC,MAAV,KAQTC,EAAcF,IAAOG,IAAV,KAiBXC,EAAS,CAAEC,OAAO,EAAOC,MAAM,GAoDtBC,EAlDH,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WACrBC,EAASC,iBAAO,MACtBC,qBAAU,WACR,IAAMC,EAAMH,EAAOI,QACfC,EAAY,KAoBhB,OAnBKZ,EAAOC,QACNY,UAAUC,aAAaC,cACzBF,UAAUC,aAAaC,aAAa,CAClClB,MAAO,CACLmB,MAAON,EAAIO,aACXC,OAAQR,EAAIS,eAEbC,MAAK,SAACC,GACPT,EAAYS,EACZX,EAAIY,UAAYV,EAChBF,EAAIa,iBAAmB,SAACC,GAAD,OAAOd,EAAIe,QAClCzB,EAAOC,OAAQ,KACdyB,OAAM,SAACC,GACRC,QAAQC,MAAM,uBAAwBF,MAG1C3B,EAAOC,OAAQ,GAGV,WACAD,EAAOE,OACVQ,EAAIoB,QACAlB,GACFA,EAAUmB,YAAY,GAAGC,OAE3BhC,EAAOE,MAAO,MAGjB,IAEH,IAAM+B,EAAQ5B,EAAO,GACrB,OACE,qCACE,cAAC6B,EAAA,EAAD,CAAOC,IAAK7B,IACZ,cAACX,EAAD,CAAWyC,SAAU,OAAQC,IAAK9B,IAClC,cAACT,EAAD,UACE,qBACEwC,IAAKL,EAAMM,KACXC,IAAKP,EAAMQ,OAASrC,EAAKsC,YAAYD,cCnEzCE,EAAY,CAChBC,MAAOC,IACPhD,MAAOiD,IACPC,KAAMC,IACNtC,IAAKP,GAmBM8C,GAhBE,sBAAe,IACtBC,EADqB,EAAX9C,KACI+C,eACdC,EAAMT,EAAUO,EAAOR,YAAYW,QAKzC,OAJKD,GACHxB,QAAQC,MAAM,wDAId,mCACGuB,GACC,cAACA,EAAD,CAAKhD,KAAM8C,EAAQ7C,OAAQ6C,EAAOR,YAAYrC,OAAQC,WAAW,SAMvD","file":"component---src-templates-artwork-detail-js-4c0191bf216d2d7ed3b0.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport Close from '../Close';\n\nconst StyledCam = styled.video`\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n\tbackground-color: #666;\n`;\n\nconst ImageHolder = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,.2);\n\n  img {\n    max-height: 80vh;\n    max-width: 90vw;\n    box-shadow: 0 0 20px rgba(0,0,0,.5);\n  }\n`;\n\n// For avoid call several times by the animation\nconst status = { enter: false, exit: false };\n\nconst Cam = ({ data, images, returnPage }) => {\n  const camRef = useRef(null);\n  useEffect(() => {\n    const cam = camRef.current;\n    let camStream = null;\n    if (!status.enter) {\n      if (navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia({\n          video: {\n            width: cam.offsetHeight,\n            height: cam.offsetWidth,\n          }\n        }).then((stream) => {\n          camStream = stream;\n          cam.srcObject = camStream;\n          cam.onloadedmetadata = (e) => cam.play();\n          status.enter = false;\n        }).catch((err) => {\n          console.error('getUserMedia() error', err);\n        });\n      }\n      status.enter = true;\n    }\n\n    return () => {\n      if (!status.exit) {\n        cam.pause();\n        if (camStream) {\n          camStream.getTracks()[0].stop();\n        }\n        status.exit = true;\n      }\n    };\n  }, []);\n\n  const image = images[0];\n  return (\n    <>\n      <Close url={returnPage} />\n      <StyledCam autoplay={'true'} ref={camRef} />\n      <ImageHolder>\n        <img\n          src={image.path}\n          alt={image.title || data.frontmatter.title}\n        />\n      </ImageHolder>\n    </>\n  );\n};\n\nexport default Cam;\n\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Carousel from '../components/artwork/format/Carousel';\nimport Video from '../components/artwork/format/Video';\nimport Cube from '../components/artwork/format/Cube';\nimport Cam from '../components/artwork/format/Cam';\n\nconst formatMap = {\n  serie: Carousel,\n  video: Video,\n  cube: Cube,\n  cam: Cam,\n};\n\nexport default ({ data }) => {\n  const detail = data.markdownRemark;\n  const Cmp = formatMap[detail.frontmatter.format];\n  if (!Cmp) {\n    console.error('Undefined format or unknown format for this artwork.');\n  }\n\n  return (\n    <>\n      {Cmp && (\n        <Cmp data={detail} images={detail.frontmatter.images} returnPage=\"/\" />\n      )}\n    </>\n  );\n};\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      id\n      frontmatter {\n        title\n        type\n        format\n        time\n        year\n        technic\n        dimensions\n        video\n        images {\n          title\n          year\n          dimensions\n          image {\n            childImageSharp {\n              original {\n                src\n              }\n            }\n          }\n        }\n      }\n      rawMarkdownBody\n      html\n    }\n  }\n`;\n"],"sourceRoot":""}