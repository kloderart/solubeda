{"version":3,"sources":["webpack:///./src/components/Header.jsx","webpack:///./src/components/list/ListItem.jsx","webpack:///./src/components/list/List.jsx","webpack:///./src/pages/exhibitions.js","webpack:///./src/components/Seo.jsx"],"names":["StyledHeader","styled","h2","Header","children","StyledListItem","li","props","imagePath","ListItem","image","onItemClick","slug","date","title","childImageSharp","original","src","onClick","className","StyledList","ul","List","items","map","item","idx","ExhibitionsPage","data","allMarkdownRemark","edges","node","frontmatter","featured","desc","html","store","dispatch","actions","setSidebarVisibility","navigate","query","SEO","description","lang","meta","keywords","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps"],"mappings":"2QAGA,IAAMA,E,UAAeC,EAAOC,GAAV,KAYHC,IANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,cAACJ,EAAD,UACGI,M,o1BCRL,IAAMC,EAAiBJ,IAAOK,GAAV,KAKM,SAAAC,GAAK,OAAIA,EAAMC,aA0C1BC,EAZE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,MAAnC,OACf,cAACT,EAAD,CACEG,UAAWE,EAAMK,gBAAgBC,SAASC,IAC1CC,QAAS,kBAAMP,EAAYC,IAF7B,SAIE,sBAAKO,UAAW,QAAhB,UACGN,GAAQ,qBAAKM,UAAW,OAAhB,SAAyBN,IACjCC,Q,0FCxCP,IAAMM,EAAanB,IAAOoB,GAAV,KAYDC,IARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOZ,EAAV,EAAUA,YAAV,OACX,cAACS,EAAD,UACGG,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,EAAD,iBAAwBD,EAAxB,CAA8Bd,YAAaA,IAA5Be,U,uKCqBNC,UAxBS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,qCACE,cAAC,IAAD,CAAKd,MAAM,iBACX,cAAC,IAAD,2BACA,cAAC,IAAD,CACES,MAAOK,EAAKC,kBAAkBC,MAAMN,KAAI,YAAe,IAAZO,EAAW,EAAXA,KACzC,MAAO,CACLlB,KAAMkB,EAAKC,YAAYnB,KACvBH,MAAOqB,EAAKC,YAAYC,SACxBnB,MAAOiB,EAAKC,YAAYlB,MACxBF,KAAMmB,EAAKC,YAAYpB,KACvBsB,KAAMH,EAAKI,SAGfxB,YAAa,SAAAC,GACXwB,IAAMC,SAASC,IAAQC,sBAAqB,IAC5CC,mBAAS,eAAe5B,EAAhB,YASX,IAAM6B,EAAK,c,sFC9BlB,SAASC,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUhC,EAAS,EAATA,MACxCiC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,cAAC,SAAD,CACEQ,eAAgB,CACdP,QAEF9B,MAAOA,EACPsC,cAAa,QAAUL,EAAKG,aAAapC,MACzC+B,KAAM,CACJ,CACEQ,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASxC,GAEX,CACEyC,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAM,gBACNC,QAASxC,GAEX,CACEuC,KAAM,sBACNC,QAASL,IAGVQ,OACCX,EAASY,OAAS,EACd,CACEL,KAAM,WACNC,QAASR,EAASa,KAAK,OAEzB,IAELF,OAAOZ,KAKhBH,EAAIkB,aAAe,CACjBhB,KAAM,KACNC,KAAM,GACNC,SAAU,IAWGJ","file":"component---src-pages-exhibitions-js-fb2772b22e0f6885dc21.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledHeader = styled.h2`\n  font-size: 32px;\n  font-weight: 100;\n  margin: 0 16px 16px;\n`;\n\nconst Header = ({ children }) => (\n  <StyledHeader>\n    {children}\n  </StyledHeader>\n);\n\nexport default Header;\n\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledListItem = styled.li`\n  cursor: pointer;\n  position: relative;\n  height: 200px;\n  width: 100%;\n  background-image: url(${props => props.imagePath});\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n  .title {\n    .date {\n      position: absolute;\n      background: black;\n      margin-top: -38px;\n      padding: 8px 16px;\n      left: 0;\n      font-size: 18px;\n      @media (max-width: 560px) {\n        font-size: 14px;\n      }\n    }\n    position: absolute;\n    background: black;\n    padding: 8px 16px;\n    color: white;\n    bottom: 8px;\n    left: 8px;\n    font-size: 24px;\n    @media (max-width: 560px) {\n      font-size: 18px;\n    }\n  }\n  margin-bottom: 32px;\n`;\n\nconst ListItem = ({ image, onItemClick, slug, date, title }) => (\n  <StyledListItem\n    imagePath={image.childImageSharp.original.src}\n    onClick={() => onItemClick(slug)}\n  >\n    <div className={'title'}>\n      {date && <div className={'date'}>{date}</div>}\n      {title}\n    </div>\n  </StyledListItem>\n);\n\nexport default ListItem;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport ListItem from './ListItem';\n\nconst StyledList = styled.ul`\n  margin: 0 16px;\n`;\n\nconst List = ({ items, onItemClick }) => (\n  <StyledList>\n    {items.map((item, idx) => (\n      <ListItem key={idx} {...item} onItemClick={onItemClick} />\n    ))}\n  </StyledList>\n);\n\nexport default List;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { navigate } from '@reach/router';\n\nimport { store, actions } from '../state';\nimport SEO from '../components/Seo';\nimport List from '../components/list/List';\nimport Header from '../components/Header';\n\nconst ExhibitionsPage = ({ data }) => {\n  return (\n    <>\n      <SEO title=\"Exposiciones\" />\n      <Header>Exposiciones</Header>\n      <List\n        items={data.allMarkdownRemark.edges.map(({ node }) => {\n          return {\n            date: node.frontmatter.date,\n            image: node.frontmatter.featured,\n            title: node.frontmatter.title,\n            slug: node.frontmatter.slug,\n            desc: node.html,\n          };\n        })}\n        onItemClick={slug => {\n          store.dispatch(actions.setSidebarVisibility(false));\n          navigate(`/exhibition/${slug}/`);\n        }}\n      />\n    </>\n  );\n};\n\nexport default ExhibitionsPage;\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: \"exhibition\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            slug\n            date(formatString: \"DD/MM/YYYY\")\n            type\n            format\n            time\n            year\n            technic\n            dimensions\n            featured {\n              childImageSharp {\n                original {\n                  src\n                }\n              }\n            }\n            spanX\n            spanY\n            images {\n              title\n              year\n              dimensions\n              image {\n                childImageSharp {\n                  original {\n                    src\n                  }\n                }\n              }\n            }\n          }\n          rawMarkdownBody\n          html\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: 'keywords',\n                content: keywords.join(', '),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}